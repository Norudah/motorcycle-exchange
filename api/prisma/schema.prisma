generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  firstName            String?
  lastName             String?
  role                 Role                   @default(USER)
  socketId             String?
  availability         String?
  password             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  chatRooms            ChatRoom[]
  notifications        NotificationOnUser[]
  messages             Message[]
  CommunicationRequest CommunicationRequest[]
}

model ChatRoom {
  id                   Int                    @id @default(autoincrement())
  name                 String?
  nbUser               Int                    @default(0)
  nbMaxUser            Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  users                User[]
  messages             Message[]
  CommunicationRequest CommunicationRequest[]
}

// model ChatRoomOnUser {
//   id         Int       @id @default(autoincrement())
//   user       User      @relation(fields: [userId], references: [id])
//   userId     Int
//   chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
//   chatRoomId Int
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   deletedAt  DateTime?
// }

// create many to many relation between user and ChatRoom
model Notification {
  id        Int                  @id @default(autoincrement())
  title     String?
  message   String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  deletedAt DateTime?
  users     NotificationOnUser[]
}

model NotificationOnUser {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
}

// Potential Message model here (not verified)

model Message {
  id         Int       @id @default(autoincrement())
  content    String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model CommunicationRequest {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}
